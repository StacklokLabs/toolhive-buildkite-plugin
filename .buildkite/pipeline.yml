steps:
  - label: ":mag: Validate Plugin"
    agents:
      queue: staging
    command: |
      echo "Validating plugin configuration..."
      echo "Validating plugin.yml..."
      python3 -c "import yaml; yaml.safe_load(open('plugin.yml'))"
      echo "✅ plugin.yml is valid"

  - label: ":shell: Syntax Check"
    agents:
      queue: staging
    command: |
      echo "Checking shell script syntax..."
      echo "Checking hook syntax..."
      for hook in hooks/*; do
        echo "Checking $hook..."
        bash -n "$hook" || exit 1
      done
      echo "✅ All hooks have valid syntax"

  - label: ":lint-roller: Plugin Linter"
    agents:
      queue: staging
    command: |
      echo "Running Buildkite plugin linter..."
      # Check if we're in a container environment or have direct access to tools
      if command -v buildkite-plugin-linter >/dev/null 2>&1; then
        echo "Using pre-installed buildkite-plugin-linter"
        buildkite-plugin-linter --id StacklokLabs/toolhive .
      elif command -v docker >/dev/null 2>&1; then
        echo "Using docker to run plugin linter"
        docker run --rm -v .:/plugin:ro -w /plugin buildkite/plugin-linter --id StacklokLabs/toolhive
      elif command -v podman >/dev/null 2>&1; then
        echo "Using podman to run plugin linter"
        podman run --rm -v .:/plugin:ro -w /plugin buildkite/plugin-linter --id StacklokLabs/toolhive
      else
        echo "⚠️  Warning: No plugin linter available, skipping..."
        echo "Consider installing buildkite-plugin-linter or a container runtime"
        exit 0
      fi

  - label: ":bug: ShellCheck"
    agents:
      queue: staging
    command: |
      echo "Running ShellCheck on hooks..."
      # Check if shellcheck is available directly or via container
      if command -v shellcheck >/dev/null 2>&1; then
        echo "Using pre-installed shellcheck"
        shellcheck hooks/*
      elif command -v docker >/dev/null 2>&1; then
        echo "Using docker to run shellcheck"
        docker run --rm -v .:/plugin:ro -w /plugin koalaman/shellcheck-alpine:stable shellcheck hooks/*
      elif command -v podman >/dev/null 2>&1; then
        echo "Using podman to run shellcheck"
        podman run --rm -v .:/plugin:ro -w /plugin koalaman/shellcheck-alpine:stable shellcheck hooks/*
      else
        echo "⚠️  Warning: No shellcheck available, skipping..."
        echo "Consider installing shellcheck or a container runtime"
        exit 0
      fi

  - label: ":test_tube: BATS Tests"
    agents:
      queue: staging
    command: |
      echo "Running BATS tests..."
      # Check if bats is available directly or via container
      if command -v bats >/dev/null 2>&1; then
        echo "Using pre-installed bats"
        bats tests/
      elif command -v docker >/dev/null 2>&1; then
        echo "Using docker to run BATS tests"
        docker run --rm -v .:/plugin:ro -w /plugin buildkite/plugin-tester
      elif command -v podman >/dev/null 2>&1; then
        echo "Using podman to run BATS tests"
        podman run --rm -v .:/plugin:ro -w /plugin buildkite/plugin-tester
      else
        echo "⚠️  Warning: No BATS test runner available, skipping..."
        echo "Consider installing bats-core or a container runtime"
        exit 0
      fi

  - label: ":white_check_mark: All Checks"
    agents:
      queue: staging
    depends_on:
      - "validate-plugin"
      - "syntax-check"
      - "plugin-linter"
      - "shellcheck"
      - "bats-tests"
    command: |
      echo "✅ All checks passed successfully!"
      echo "Plugin is ready for release"

  # Commenting this out since we're running CI on a very locked down cluster.
  # - label: ":package: Test Plugin Usage"
  #   command: |
  #     echo "Testing plugin with a simple MCP server..."
  #     echo "This would normally test the plugin in a real pipeline"
  #   plugins:
  #     - ./.:
  #         server: "fetch"
  #         name: "test-fetch-server"
  #         cleanup: true
  #   if: build.branch == "main"
