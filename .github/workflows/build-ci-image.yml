name: Build and Publish CI Image

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile.ci'
      - '.github/workflows/build-ci-image.yml'
  pull_request:
    paths:
      - 'Dockerfile.ci'
      - '.github/workflows/build-ci-image.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ci-tools

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ci
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image (amd64)
        run: |
          docker run --rm --platform linux/amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest bash -c "
            echo 'Testing installed tools on amd64...'
            python3 --version
            shellcheck --version
            bats --version
            buildkite-plugin-linter --version
            yamllint --version
            echo 'All tools are working on amd64!'
          "

      - name: Test image (arm64)
        run: |
          docker run --rm --platform linux/arm64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest bash -c "
            echo 'Testing installed tools on arm64...'
            python3 --version
            shellcheck --version
            bats --version
            buildkite-plugin-linter --version
            yamllint --version
            echo 'All tools are working on arm64!'
          "