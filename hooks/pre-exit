#!/bin/bash
set -euo pipefail

echo "--- :broom: Cleaning up ToolHive MCP Server"

# Check if cleanup is enabled (default: true)
CLEANUP_ENABLED="${BUILDKITE_PLUGIN_TOOLHIVE_CLEANUP:-true}"

if [[ "$CLEANUP_ENABLED" != "true" ]]; then
    echo "Cleanup disabled, skipping MCP server cleanup"
    exit 0
fi

# Get the MCP server names that were stored during pre-command
MCP_SERVER_NAMES="${BUILDKITE_PLUGIN_TOOLHIVE_MCP_SERVER_NAMES:-}"

if [[ -z "$MCP_SERVER_NAMES" ]]; then
    echo "No MCP server names found, nothing to clean up"
    exit 0
fi

echo "Found MCP servers to clean up: $MCP_SERVER_NAMES"

# Ensure ToolHive is available
if ! command -v thv >/dev/null 2>&1; then
    echo "Warning: ToolHive (thv) not found in PATH, cannot clean up MCP server" >&2
    exit 0
fi

# Function to safely execute thv commands with error handling
safe_thv_command() {
    local subcmd="$1"
    local server="$2"
    
    if ! thv "$subcmd" "$server" 2>/dev/null; then
        echo "Warning: Failed to thv $subcmd server '$server' (it may not exist or already be stopped)"
        return 1
    fi
    return 0
}

# Function to clean up a single server
cleanup_server() {
    local server_name="$1"
    
    echo "Cleaning up MCP server: $server_name"
    
    # Check if the server exists
    if thv list --all 2>/dev/null | grep -q "^$server_name "; then
        echo "Found MCP server '$server_name', proceeding with cleanup..."
        
        # Remove the server container
        echo "Removing MCP server '$server_name'..."
        if safe_thv_command "rm" "$server_name"; then
            echo "✅ MCP server '$server_name' removed successfully"
        fi
        
        # Verify cleanup
        if ! thv list --all 2>/dev/null | grep -q "^$server_name "; then
            echo "✅ Cleanup completed successfully for '$server_name'"
        else
            echo "⚠️  Server '$server_name' may still exist after cleanup"
        fi
    else
        echo "MCP server '$server_name' not found, nothing to clean up"
    fi
}

# Clean up all servers (comma-separated list)
IFS=',' read -ra SERVER_ARRAY <<< "$MCP_SERVER_NAMES"
for server_name in "${SERVER_ARRAY[@]}"; do
    # Trim whitespace
    server_name=$(echo "$server_name" | xargs)
    if [[ -n "$server_name" ]]; then
        cleanup_server "$server_name"
    fi
done

# Clean up the environment variable
unset BUILDKITE_PLUGIN_TOOLHIVE_MCP_SERVER_NAMES

# Clean up MCP configuration file if configured
MCP_CONFIG_FILES="${BUILDKITE_PLUGIN_TOOLHIVE_MCP_CONFIG_FILES:-}"
MCP_CONFIG_CLEANUP_SETTING="${BUILDKITE_PLUGIN_TOOLHIVE_MCP_CONFIG_CLEANUP_SETTING:-true}"

if [[ -n "$MCP_CONFIG_FILES" && "$MCP_CONFIG_CLEANUP_SETTING" == "true" ]]; then
    echo "Cleaning up MCP configuration files..."
    
    IFS=',' read -ra CONFIG_FILE_ARRAY <<< "$MCP_CONFIG_FILES"
    for config_file in "${CONFIG_FILE_ARRAY[@]}"; do
        # Trim whitespace
        config_file=$(echo "$config_file" | xargs)
        if [[ -n "$config_file" && -f "$config_file" ]]; then
            echo "Removing MCP config file: $config_file"
            rm -f "$config_file" || echo "Warning: Failed to remove $config_file"
        fi
    done
    
    # Clean up environment variables
    unset BUILDKITE_PLUGIN_TOOLHIVE_MCP_CONFIG_FILES
    unset BUILDKITE_PLUGIN_TOOLHIVE_MCP_CONFIG_CLEANUP_SETTING
    unset BUILDKITE_PLUGIN_TOOLHIVE_MCP_CONFIG_FILE
else
    echo "MCP config file cleanup disabled or no files to clean up"
fi

echo "MCP server cleanup complete"