# CI Tools Docker Image for Buildkite Plugin Testing
# This image contains all the tools needed to run our CI pipeline

FROM buildkite/agent:3

# Install system dependencies
USER root
RUN apk update && apk add --no-cache \
    python3 \
    py3-pip \
    py3-yaml \
    bash \
    curl \
    wget \
    git \
    jq \
    ca-certificates

# Use Docker build arguments for architecture detection
ARG TARGETARCH

# Install ShellCheck (architecture-aware)
RUN case ${TARGETARCH} in \
        amd64) SHELLCHECK_ARCH="x86_64" ;; \
        arm64) SHELLCHECK_ARCH="aarch64" ;; \
        *) echo "Unsupported architecture: ${TARGETARCH}" && exit 1 ;; \
    esac \
    && wget -qO- "https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.${SHELLCHECK_ARCH}.tar.xz" | tar -xJv \
    && cp "shellcheck-stable/shellcheck" /usr/bin/ \
    && rm -rf shellcheck-stable

# Install BATS (Bash Automated Testing System)
RUN git clone https://github.com/bats-core/bats-core.git /tmp/bats-core \
    && cd /tmp/bats-core \
    && ./install.sh /usr/local \
    && rm -rf /tmp/bats-core

# Install bats-support and bats-assert for better test functionality
RUN git clone https://github.com/bats-core/bats-support.git /usr/local/lib/bats-support \
    && git clone https://github.com/bats-core/bats-assert.git /usr/local/lib/bats-assert \
    && git clone https://github.com/bats-core/bats-file.git /usr/local/lib/bats-file

# Set up BATS plugin path to match buildkite/plugin-tester expectations
ENV BATS_PLUGIN_PATH=/usr/lib/bats

# Install bats-mock (buildkite's fork) which provides the stub functionality
RUN mkdir -p "${BATS_PLUGIN_PATH}"/bats-mock \
    && curl -sSL https://github.com/buildkite-plugins/bats-mock/archive/v2.1.1.tar.gz -o /tmp/bats-mock.tgz \
    && tar -zxf /tmp/bats-mock.tgz -C "${BATS_PLUGIN_PATH}"/bats-mock --strip 1 \
    && rm -rf /tmp/bats-mock.tgz

# Create symlinks for BATS libraries in the plugin path
RUN mkdir -p "${BATS_PLUGIN_PATH}" \
    && ln -s /usr/local/lib/bats-support "${BATS_PLUGIN_PATH}"/bats-support \
    && ln -s /usr/local/lib/bats-assert "${BATS_PLUGIN_PATH}"/bats-assert \
    && ln -s /usr/local/lib/bats-file "${BATS_PLUGIN_PATH}"/bats-file

# Create the load.bash file that sources all BATS libraries (matching plugin-tester setup)
RUN printf 'source "%s"\n' "${BATS_PLUGIN_PATH}/bats-support/load.bash" >> "${BATS_PLUGIN_PATH}"/load.bash \
    && printf 'source "%s"\n' "${BATS_PLUGIN_PATH}/bats-assert/load.bash" >> "${BATS_PLUGIN_PATH}"/load.bash \
    && printf 'source "%s"\n' "${BATS_PLUGIN_PATH}/bats-mock/stub.bash" >> "${BATS_PLUGIN_PATH}"/load.bash \
    && printf 'source "%s"\n' "${BATS_PLUGIN_PATH}/bats-file/load.bash" >> "${BATS_PLUGIN_PATH}"/load.bash

# Install Node.js and npm for buildkite-plugin-linter
RUN apk add --no-cache nodejs npm

# Install Buildkite Plugin Linter from source
RUN git clone https://github.com/buildkite-plugins/buildkite-plugin-linter.git /tmp/plugin-linter \
    && cd /tmp/plugin-linter \
    && npm install \
    && ln -s /tmp/plugin-linter/bin/lint /usr/local/bin/buildkite-plugin-linter \
    && chmod +x /usr/local/bin/buildkite-plugin-linter

# Install yamllint for additional YAML validation (using pip with --break-system-packages for container)
RUN pip3 install --break-system-packages yamllint

# Create a non-root user for running builds (Alpine uses adduser instead of useradd)
RUN adduser -D -s /bin/bash buildkite-ci
USER buildkite-ci

# Set working directory
WORKDIR /workspace

# Default command
CMD ["/bin/bash"]